name: Daily Ceneo Reviews Scraper (single-file)

on:
  schedule:
    - cron: "5 5 * * *" # daily 05:05 UTC (~07:05 Prague)
  workflow_dispatch:

jobs:
  scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install Playwright
        run: |
          set -e
          npm i playwright@^1.47
          npx playwright install chromium

      - name: Run inline scraper
        shell: bash
        run: |
          set -e
          set -x
          mkdir -p data
          node - <<'NODE'
          import fs from "node:fs";
          import { chromium } from "playwright";

          const URL = "https://www.ceneo.pl/sklepy/natima.pl-s51196#tab=reviews";
          const OUT_FILE = "data/reviews.json";

          const sleep = (ms) => new Promise(r => setTimeout(r, ms));

          (async () => {
            const browser = await chromium.launch({ headless: true });
            const page = await browser.newPage();

            await page.goto(URL, { waitUntil: "networkidle", timeout: 60000 });

            try {
              const consent = await page.$('text=/accept|zgadzam|akceptuj/i');
              if (consent) await consent.click({ timeout: 2000 });
            } catch {}

            await page.waitForSelector(".user-post", { timeout: 30000 });
            await sleep(500);

            const records = await page.$$eval(".user-post", (posts) => {
              const getText = (root, sel) => {
                const el = root.querySelector(sel);
                return el ? el.textContent : "";
              };
              const firstScore = (raw) => {
                if (typeof raw !== "string") return "";
                const first = raw.split("/")[0] ?? "";
                return first.trim();
              };

              return posts.map((post) => {
                const textRaw = getText(post, ".user-post__text");
                const scoreRaw = getText(post, ".user-post__score-count");
                return {
                  total_rating: { _text: firstScore(scoreRaw) },
                  summary: { _text: textRaw ?? "" },
                };
              });
            });

            const payload = { reviews: { review: records } };
            fs.writeFileSync(OUT_FILE, JSON.stringify(payload, null, 2), "utf8");

            await browser.close();
            console.log(`Saved ${records.length} reviews -> ${OUT_FILE}`);
          })().catch((e) => {
            console.error(e);
            process.exit(1);
          });
          NODE

      - name: Commit changes (if any)
        run: |
          set -e
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"
            git add data/reviews.json
            git commit -m "chore: update Ceneo reviews ($(date -u +'%Y-%m-%dT%H:%M:%SZ'))"
            git push
          else
            echo "No changes to commit."
